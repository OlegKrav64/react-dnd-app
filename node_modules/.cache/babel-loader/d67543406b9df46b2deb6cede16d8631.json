{"ast":null,"code":"var _jsxFileName = \"/home/supremio/Desktop/react-dnd-app/src/components/ModalList/ModalList.js\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport styles from './ModalList.module.scss';\nimport { ModalListItem } from './ModalListItem/ModalListItem';\nimport { getItems } from '../../redux/selectors/mealsSelector';\nimport { setModalListVisibility } from '../../redux/actions/modalListActionCreator';\nimport { getModalListActiveCategory } from '../../redux/selectors/modalListSelector';\nimport { useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nexport const ModalList = () => {\n  _s();\n\n  const {\n    isLoaded,\n    items\n  } = useSelector(getItems);\n  const activeCategory = useSelector(getModalListActiveCategory);\n  const dispatch = useDispatch();\n  const modalRef = useRef(null);\n\n  const changeModalVisibility = () => {\n    dispatch(setModalListVisibility(false, null));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.overlay,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.modalList,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.topSide,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Recipes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: changeModalVisibility,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: styles.list,\n        children: isLoaded ? items.map(item => /*#__PURE__*/_createElement(ModalListItem, { ...item,\n          key: item.id,\n          activeCategory: activeCategory,\n          dispatch: dispatch,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 43\n          }\n        })) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.loader,\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModalList, \"aVXwgYDAJuPqkL1vRTB/ks5ORxQ=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ModalList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalList\");","map":{"version":3,"sources":["/home/supremio/Desktop/react-dnd-app/src/components/ModalList/ModalList.js"],"names":["useDispatch","useSelector","styles","ModalListItem","getItems","setModalListVisibility","getModalListActiveCategory","useRef","ModalList","isLoaded","items","activeCategory","dispatch","modalRef","changeModalVisibility","overlay","modalList","topSide","list","map","item","id","loader"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,aAAT,QAA8B,+BAA9B;AACA,SAASC,QAAT,QAAyB,qCAAzB;AACA,SAASC,sBAAT,QAAuC,4CAAvC;AACA,SAASC,0BAAT,QAA2C,yCAA3C;AACA,SAASC,MAAT,QAAuB,OAAvB;;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAoBT,WAAW,CAACG,QAAD,CAArC;AACA,QAAMO,cAAc,GAAGV,WAAW,CAACK,0BAAD,CAAlC;AAEA,QAAMM,QAAQ,GAAGZ,WAAW,EAA5B;AAEA,QAAMa,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;;AAEA,QAAMO,qBAAqB,GAAG,MAAM;AAChCF,IAAAA,QAAQ,CAACP,sBAAsB,CAAC,KAAD,EAAQ,IAAR,CAAvB,CAAR;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAEH,MAAM,CAACa,OAAvB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAEb,MAAM,CAACc,SAAvB;AAAA,8BACI;AAAK,QAAA,SAAS,EAAEd,MAAM,CAACe,OAAvB;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACI,UAAA,OAAO,EAAEH,qBADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI;AAAI,QAAA,SAAS,EAAEZ,MAAM,CAACgB,IAAtB;AAAA,kBACMT,QAAQ,GACNC,KAAK,CAACS,GAAN,CAAUC,IAAI,iBAAI,eAAC,aAAD,OAAmBA,IAAnB;AAAyB,UAAA,GAAG,EAAEA,IAAI,CAACC,EAAnC;AAAuC,UAAA,cAAc,EAAEV,cAAvD;AAAuE,UAAA,QAAQ,EAAEC,QAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAlB,CADM,gBAEN;AAAK,UAAA,SAAS,EAAEV,MAAM,CAACoB,MAAvB;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAHR;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CAhCM;;GAAMd,S;UACiBP,W,EACHA,W,EAEND,W;;;KAJRQ,S","sourcesContent":["import { useDispatch, useSelector } from 'react-redux'\nimport styles from './ModalList.module.scss'\nimport { ModalListItem } from './ModalListItem/ModalListItem'\nimport { getItems } from '../../redux/selectors/mealsSelector'\nimport { setModalListVisibility } from '../../redux/actions/modalListActionCreator'\nimport { getModalListActiveCategory } from '../../redux/selectors/modalListSelector'\nimport { useRef } from 'react'\n\nexport const ModalList = () => {\n    const {isLoaded, items} = useSelector(getItems)\n    const activeCategory = useSelector(getModalListActiveCategory)\n    \n    const dispatch = useDispatch()\n\n    const modalRef = useRef(null)\n\n    const changeModalVisibility = () => {\n        dispatch(setModalListVisibility(false, null))\n    }\n\n    return (\n        <div className={styles.overlay}>\n            <div className={styles.modalList}>\n                <div className={styles.topSide}>\n                    <h3>Recipes</h3>\n                    <button\n                        onClick={changeModalVisibility}\n                    >&times;</button>\n                </div>\n                <ul className={styles.list}>\n                    { isLoaded ?\n                        items.map(item => <ModalListItem {...item} key={item.id} activeCategory={activeCategory} dispatch={dispatch} />) :\n                        <div className={styles.loader}>\n                            <h3>Loading...</h3>\n                        </div>\n                    }\n                </ul>\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}